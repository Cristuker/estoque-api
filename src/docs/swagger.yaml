swagger: '2.0'
info:
  description: 'This is a simple api to controle of estoque'
  version: '1.0.0'
  title: 'Estoque - API'
  termsOfService: ''
  contact:
    email: 'cristian123105@gmail.com'
  license:
    name: 'MIT License'
    url: 'https://github.com/Cristuker/estoque-api/blob/master/LICENSE'
host: 'localhost:3333'
basePath: '/'
tags:
  - name: 'Materials'
    description: 'Control your materials'
    externalDocs:
      description: 'Find out more'
      url: 'https://github.com/Cristuker/estoque-api'
  - name: 'Users'
    description: 'Create users to acess the api'
  - name: 'Login'
    description: 'Get token to authentitcate'
schemes:
  - 'http'
paths:
  /login:
    post:
      tags:
        - 'Login'
      summary: 'Get a authorization token'
      description: ''
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'User credentials to get a authorization'
          required: true
          schema:
            $ref: '#/definitions/Login'
      responses:
        '200':
          description: authorization token
        '400':
          description: 'Password dont match'
        '404':
          description: 'User not find'
        '406':
          description: 'The request body is not valid, check the params'
        '500':
          description: 'Internal server error'
  /users:
    post:
      tags:
        - 'Users'
      summary: 'Create users'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'User information'
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/UserCreated'
        '400':
          description: 'Invalid status value'
        '406': 
          description: 'The request body is not valid, check the params'
        '409':
          description: 'The email is alredy used'
        '500':
          description: 'Internal server error'
securityDefinitions:
  petstore_auth:
    type: 'oauth2'
    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    flow: 'implicit'
    scopes:
      write:pets: 'modify pets in your account'
      read:pets: 'read your pets'
  api_key:
    type: 'apiKey'
    name: 'api_key'
    in: 'header'
definitions:
  Login:
    type: 'object'
    properties:
      email:
        type: 'string'
      password:
        type: 'string'
    required:
      - 'email'
      - 'password'
  User:
    type: 'object'
    properties:
      name:
        type: 'string'
      password:
        type: 'string'
      password_confirmation:
        type: 'string'
      email:
        type: 'string'
      role:
        type: 'string'
    required:
      - 'name'
      - 'email'
      - 'role'
      - 'password'
      - 'password_confirmation'
  UserCreated:
    type: 'object'
    properties: 
      id:
        type: 'integer'
      name:
        type: 'string'
      role:
        type: 'string'
      email:
        type: 'string'
  Order:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      petId:
        type: 'integer'
        format: 'int64'
      quantity:
        type: 'integer'
        format: 'int32'
      shipDate:
        type: 'string'
        format: 'date-time'
      status:
        type: 'string'
        description: 'Order Status'
        enum:
          - 'placed'
          - 'approved'
          - 'delivered'
      complete:
        type: 'boolean'
        default: false
    xml:
      name: 'Order'
  Category:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
    xml:
      name: 'Category'
  User:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      username:
        type: 'string'
      firstName:
        type: 'string'
      lastName:
        type: 'string'
      email:
        type: 'string'
      password:
        type: 'string'
      phone:
        type: 'string'
      userStatus:
        type: 'integer'
        format: 'int32'
        description: 'User Status'
    xml:
      name: 'User'
  Tag:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
    xml:
      name: 'Tag'
  Pet:
    type: 'object'
    required:
      - 'name'
      - 'photoUrls'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      category:
        $ref: '#/definitions/Category'
      name:
        type: 'string'
        example: 'doggie'
      photoUrls:
        type: 'array'
        xml:
          name: 'photoUrl'
          wrapped: true
        items:
          type: 'string'
      tags:
        type: 'array'
        xml:
          name: 'tag'
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
      status:
        type: 'string'
        description: 'pet status in the store'
        enum:
          - 'available'
          - 'pending'
          - 'sold'
    xml:
      name: 'Pet'
  ApiResponse:
    type: 'object'
    properties:
      code:
        type: 'integer'
        format: 'int32'
      type:
        type: 'string'
      message:
        type: 'string'
externalDocs:
  description: 'Find out more about Swagger'
  url: 'http://swagger.io'
